% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MsBackendMassbankSql-functions.R,
%   R/MsBackendMassbankSql.R
\name{MsBackendMassbankSql}
\alias{MsBackendMassbankSql}
\alias{MsBackendMassbankSql-class}
\alias{backendInitialize,MsBackendMassbankSql-method}
\alias{acquisitionNum,MsBackendMassbankSql-method}
\alias{peaksData,MsBackendMassbankSql-method}
\alias{centroided,MsBackendMassbankSql-method}
\alias{centroided<-,MsBackendMassbankSql-method}
\alias{collisionEnergy,MsBackendMassbankSql-method}
\alias{collisionEnergy<-,MsBackendMassbankSql-method}
\alias{dataStorage,MsBackendMassbankSql-method}
\alias{length,MsBackendMassbankSql-method}
\alias{spectraData,MsBackendMassbankSql-method}
\alias{spectraVariables,MsBackendMassbankSql-method}
\alias{$,MsBackendMassbankSql-method}
\alias{$<-,MsBackendMassbankSql-method}
\title{MS backend accessing the MassBank MySQL database}
\usage{
MsBackendMassbankSql()

\S4method{backendInitialize}{MsBackendMassbankSql}(object, dbcon, ...)

\S4method{acquisitionNum}{MsBackendMassbankSql}(object)

\S4method{peaksData}{MsBackendMassbankSql}(object)

\S4method{centroided}{MsBackendMassbankSql}(object)

\S4method{centroided}{MsBackendMassbankSql}(object) <- value

\S4method{collisionEnergy}{MsBackendMassbankSql}(object)

\S4method{collisionEnergy}{MsBackendMassbankSql}(object) <- value

\S4method{dataStorage}{MsBackendMassbankSql}(object)

\S4method{length}{MsBackendMassbankSql}(x)

\S4method{spectraData}{MsBackendMassbankSql}(object, columns = spectraVariables(object))

\S4method{spectraVariables}{MsBackendMassbankSql}(object)

\S4method{$}{MsBackendMassbankSql}(x, name)

\S4method{$}{MsBackendMassbankSql}(x, name) <- value
}
\arguments{
\item{object}{Object extending \code{MsBackendMassbankSql}.}

\item{dbcon}{For \verb{backendInitialize,MsBackendMassbankSql}: SQL database
connection to the MassBank (MariaDb) database.}

\item{...}{Additional arguments.}

\item{value}{replacement value for \verb{<-} methods. See individual
method description or expected data type.}

\item{x}{Object extending \code{MsBackendMassbankSql}.}

\item{columns}{For \code{spectraData} accessor: optional \code{character} with column
names (spectra variables) that should be included in the
returned \code{DataFrame}. By default, all columns are returned.}

\item{name}{For \code{$} and \verb{$<-}: the name of the spectra variable to return
or set.}

\item{dataOrigin}{For \code{filterDataOrigin}: \code{character} to define which
spectra to keep.
For \code{filterAcquisitionNum}: optionally specify if filtering should occurr
only for spectra of selected \code{dataOrigin}.}

\item{drop}{For \code{[}: not considered.}

\item{f}{\code{factor} defining the grouping to split \code{x}. See \code{\link[=split]{split()}}.}

\item{file}{For \code{filterFile}: index or name of the file(s) to which the data
should be subsetted. For \code{export}: \code{character} of length 1 or equal to
the number of spectra.}

\item{initial}{For \code{tic}: \code{logical(1)} whether the initially
reported total ion current should be reported, or whether the
total ion current should be (re)calculated on the actual data
(\code{initial = FALSE}).}

\item{i}{For \code{[}: \code{integer}, \code{logical} or \code{character} to subset the object.}

\item{j}{For \code{[}: not supported.}

\item{msLevel}{\code{integer} defining the MS level of the spectra to which the
function should be applied. For \code{filterMsLevel}: the MS level to which
\code{object} should be subsetted.}

\item{mz}{For \code{filterIsolationWindow}: \code{numeric(1)} with the m/z value to
filter the object. For \code{filterPrecursorMz}: \code{numeric(2)} with the lower
and upper m/z boundary.}

\item{n}{for \code{filterAcquisitionNum}: \code{integer} with the acquisition numbers
to filter for.}

\item{polarity}{For \code{filterPolarity}: \code{integer} specifying the polarity to
to subset \code{object}.}

\item{rt}{for \code{filterRt}: \code{numeric(2)} defining the retention time range to
be used to subset/filter \code{object}.}

\item{spectraVariables}{For \code{selectSpectraVariables}: \code{character} with the
names of the spectra variables to which the backend should be subsetted.}

\item{use.names}{For \code{lengths}: whether spectrum names should be used.}
}
\value{
See documentation of respective function.
}
\description{
The \code{MsBackendMassbankSql} provides access to mass spectrometry data from
\href{https://massbank.eu/MassBank/}{MassBank} by directly accessing its
MySQL/MariaDb database. In addition it supports adding new spectra variables
or \emph{locally} changing spectra variables provided by MassBank (withoug
changing the original values in the database).

Note that \code{MsBackendMassbankSql} requires a local installation of the
MassBank database since direct database access is not supported for the
\emph{main} MassBank instance.
}
\section{Supported Backend functions}{


The following functions are supported by the \code{MsBackendMassbankSqlMassbankDb}.
\itemize{
\item \code{[}: subset the backend. Only subsetting by element (\emph{row}/\code{i}) is
allowed
\item \code{$}, \verb{$<-}: access or set/add a single spectrum variable (column) in the
backend.
\item \code{acquisitionNum}: returns the acquisition number of each
spectrum. Returns an \code{integer} of length equal to the number of
spectra (with \code{NA_integer_} if not available).
\item \code{peaksData} returns a \code{list} with the spectras' peak data. The length of
the list is equal to the number of spectra in \code{object}. Each element of
the list is a \code{matrix} with columns \code{"mz"} and \code{"intensity"}. For an empty
spectrum, a \code{matrix} with 0 rows and two columns (named \code{mz} and
\code{intensity}) is returned.
\item \code{backendInitialize}: initialises the backend by retrieving the IDs of all
spectra in the database. Parameter \code{dbcon} with the connection to the
MassBank MySQL database is required.
\item \code{dataOrigin}: gets a \code{character} of length equal to the number of spectra
in \code{object} with the \emph{data origin} of each spectrum. This could e.g. be
the mzML file from which the data was read.
\item \code{dataStorage}: returns \code{"<MassBank>"} for all spectra.
\item \code{dropNaSpectraVariables}: removes spectra variables (i.e. columns in the
object's \code{spectraData} that contain only missing values (\code{NA}). Note that
while columns with only \code{NA}s are removed, a \code{spectraData} call after
\code{dropNaSpectraVariables} might still show columns containing \code{NA} values
for \emph{core} spectra variables.
\item \code{centroided}, \verb{centroided<-}: gets or sets the centroiding
information of the spectra. \code{centroided} returns a \code{logical}
vector of length equal to the number of spectra with \code{TRUE} if a
spectrum is centroided, \code{FALSE} if it is in profile mode and \code{NA}
if it is undefined. See also \code{isCentroided} for estimating from
the spectrum data whether the spectrum is centroided.  \code{value}
for \verb{centroided<-} is either a single \code{logical} or a \code{logical} of
length equal to the number of spectra in \code{object}.
\item \code{collisionEnergy}, \verb{collisionEnergy<-}: gets or sets the
collision energy for all spectra in \code{object}. \code{collisionEnergy}
returns a \code{numeric} with length equal to the number of spectra
(\code{NA_real_} if not present/defined), \verb{collisionEnergy<-} takes a
\code{numeric} of length equal to the number of spectra in \code{object}.
\item \code{filterAcquisitionNum}: filters the object keeping only spectra matching
the provided acquisition numbers (argument \code{n}). If \code{dataOrigin} or
\code{dataStorage} is also provided, \code{object} is subsetted to the spectra with
an acquisition number equal to \code{n} \strong{in spectra with matching dataOrigin
or dataStorage values} retaining all other spectra.
\item \code{filterDataOrigin}: filters the object retaining spectra matching the
provided \code{dataOrigin}. Parameter \code{dataOrigin} has to be of type
\code{character} and needs to match exactly the data origin value of the
spectra to subset.
\code{filterDataOrigin} should return the data ordered by the provided
\code{dataOrigin} parameter, i.e. if \code{dataOrigin = c("2", "1")} was provided,
the spectra in the resulting object should be ordered accordingly (first
spectra from data origin \code{"2"} and then from \code{"1"}).
\item \code{filterEmptySpectra}: removes empty spectra (i.e. spectra without peaks).
\item \code{filterFile}: retains data of files matching the file index or file name
provided with parameter \code{file}.
\item \code{filterIsolationWindow}: retains spectra that contain \code{mz} in their
isolation window m/z range (i.e. with an \code{isolationWindowLowerMz} \code{<=} \code{mz}
and \code{isolationWindowUpperMz} \code{>=} \code{mz}.
\item \code{filterMsLevel}: retains spectra of MS level \code{msLevel}.
\item \code{filterPolarity}: retains spectra of polarity \code{polarity}.
\item \code{filterPrecursorMz}: retains spectra with a precursor m/z within the
provided m/z range.
\item \code{filterRt}: retains spectra of MS level \code{msLevel} with retention times
within (\code{>=}) \code{rt[1]} and (\code{<=}) \code{rt[2]}.
\item \code{intensity}: gets the intensity values from the spectra. Returns
a \code{\link[=NumericList]{NumericList()}} of \code{numeric} vectors (intensity values for each
spectrum). The length of the \code{list} is equal to the number of
\code{spectra} in \code{object}.
\item \verb{intensity<-}: replaces the intensity values. \code{value} has to be a \code{list}
(or \code{\link[=NumericList]{NumericList()}}) of length equal to the number of spectra and the
number of values within each list element identical to the number of
peaks in each spectrum (i.e. the \code{lengths(x)}). Note that just
writeable backends support this method.
\item \code{ionCount}: returns a \code{numeric} with the sum of intensities for
each spectrum. If the spectrum is empty (see \code{isEmpty}),
\code{NA_real_} is returned.
\item \code{isCentroided}: a heuristic approach assessing if the spectra in
\code{object} are in profile or centroided mode. The function takes
the \code{qtl} th quantile top peaks, then calculates the difference
between adjacent m/z value and returns \code{TRUE} if the first
quartile is greater than \code{k}. (See \code{Spectra:::.isCentroided} for
the code.)
\item \code{isEmpty}: checks whether a spectrum in \code{object} is empty
(i.e. does not contain any peaks). Returns a \code{logical} vector of
length equal number of spectra.
\item \code{isolationWindowLowerMz}, \verb{isolationWindowLowerMz<-}: gets or sets the
lower m/z boundary of the isolation window.
\item \code{isolationWindowTargetMz}, \verb{isolationWindowTargetMz<-}: gets or sets the
target m/z of the isolation window.
\item \code{isolationWindowUpperMz}, \verb{isolationWindowUpperMz<-}: gets or sets the
upper m/z boundary of the isolation window.
\item \code{isReadOnly}: returns a \code{logical(1)} whether the backend is \emph{read
only} or does allow also to write/update data.
\item \code{length}: returns the number of spectra in the object.
\item \code{lengths}: gets the number of peaks (m/z-intensity values) per
spectrum.  Returns an \code{integer} vector (length equal to the
number of spectra). For empty spectra, \code{0} is returned.
\item \code{msLevel}: gets the spectra's MS level. Returns an \code{integer}
vector (of length equal to the number of spectra) with the MS
level for each spectrum (or \code{NA_integer_} if not available).
\item \code{mz}: gets the mass-to-charge ratios (m/z) from the
spectra. Returns a \code{\link[=NumericList]{NumericList()}} or length equal to the number of
spectra, each element a \code{numeric} vector with the m/z values of
one spectrum.
\item \verb{mz<-}: replaces the m/z values. \code{value} has to be a \code{list} of length equal
to the number of spectra and the number of values within each list element
identical to the number of peaks in each spectrum (i.e. the
\code{lengths(x)}). Note that just writeable backends support this method.
\item \code{polarity}, \verb{polarity<-}: gets or sets the polarity for each
spectrum.  \code{polarity} returns an \code{integer} vector (length equal
to the number of spectra), with \code{0} and \code{1} representing negative
and positive polarities, respectively. \verb{polarity<-} expects an
integer vector of length 1 or equal to the number of spectra.
\item \code{precursorCharge}, \code{precursorIntensity}, \code{precursorMz},
\code{precScanNum}, \code{precAcquisitionNum}: get the charge (\code{integer}),
intensity (\code{numeric}), m/z (\code{numeric}), scan index (\code{integer})
and acquisition number (\code{interger}) of the precursor for MS level
2 and above spectra from the object. Returns a vector of length equal to
the number of spectra in \code{object}. \code{NA} are reported for MS1
spectra of if no precursor information is available.
\item \code{reset} a backend (if supported). This method will be called on the backend
by the \verb{reset,Spectra} method that is supposed to restore the data to its
original state (see \verb{reset,Spectra} for more details). The function
returns the \emph{reset} backend. The default implementation for \code{MsBackendMassbankSql}
returns the backend as-is.
\item \code{rtime}, \verb{rtime<-}: gets or sets the retention times for each
spectrum (in seconds). \code{rtime} returns a \code{numeric} vector (length equal to
the number of spectra) with the retention time for each spectrum.
\verb{rtime<-} expects a numeric vector with length equal to the
number of spectra.
\item \code{scanIndex}: returns an \code{integer} vector with the \emph{scan index}
for each spectrum. This represents the relative index of the
spectrum within each file. Note that this can be different to the
\code{acquisitionNum} of the spectrum which is the index of the
spectrum as reported in the mzML file.
\item \code{selectSpectraVariables}: reduces the information within the backend to
the selected spectra variables.
\item \code{smoothed},\verb{smoothed<-}: gets or sets whether a spectrum is
\emph{smoothed}. \code{smoothed} returns a \code{logical} vector of length equal
to the number of spectra. \verb{smoothed<-} takes a \code{logical} vector
of length 1 or equal to the number of spectra in \code{object}.
\item \code{spectraData}, \verb{spectraData<-}: gets or sets general spectrum
metadata (annotation, also called header).  \code{spectraData} returns
a \code{DataFrame}, \verb{spectraData<-} expects a \code{DataFrame} with the same number
of rows as there are spectra in \code{object}. Note that \code{spectraData} has to
return the full data, i.e. also the m/z and intensity values (as a \code{list}
or \code{SimpleList} in columns \code{"mz"} and \code{"intensity"}.
\item \code{spectraNames}: returns a \code{character} vector with the names of
the spectra in \code{object}.
\item \code{spectraVariables}: returns a \code{character} vector with the
available spectra variables (columns, fields or attributes)
available in \code{object}. This should return \strong{all} spectra variables which
are present in \code{object}, also \code{"mz"} and \code{"intensity"} (which are by
default not returned by the \verb{spectraVariables,Spectra} method).
\item \code{split}: splits the backend into a \code{list} of backends (depending on
parameter \code{f}). The default method for \code{MsBackendMassbankSql} uses \code{\link[=split.default]{split.default()}},
thus backends extending \code{MsBackendMassbankSql} don't necessarily need to implement
this method.
\item \code{tic}: gets the total ion current/count (sum of signal of a
spectrum) for all spectra in \code{object}. By default, the value
reported in the original raw data file is returned. For an empty
spectrum, \code{NA_real_} is returned.
}
}

\section{Not supported Backend functions}{


The following functions are not supported by the \code{MsBackendMassbankSql} since
the original data can not be changed.

\code{backendMerge}, \code{export}, \code{filterDataStorage}, \code{filterPrecursorScan},
\verb{peaksData<-}
}

\author{
Johannes Rainer
}
